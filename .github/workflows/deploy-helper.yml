name: Deploy Helper

on:
  push:
    branches:
      - main

# on:
#   workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project: [test]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3

      - name: Install dependencies
        run: npm install

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        id: setSHAs
        uses: nrwl/nx-set-shas@v4

      - name: Run color
        id: selectesed_colors
        run: echo "SELECTED_COLOR=green" >> "$GITHUB_OUTPUT"

      - name: Get color
        env:
          SELECTED_COLOR: ${{ steps.selectesed_colors.outputs.SELECTED_COLOR }}
        run: echo "The selected color is $SELECTED_COLOR"

      - name: Only run
        run: npx nx show projects --affected -t build --base=${{ steps.setSHAs.outputs.base }} --head=${{ steps.setSHAs.outputs.head }}

      - name: Run nx command to show affected projects
        uses: gh640/command-result-action@v1
        with:
          command: npx nx show projects --affected -t build --base=${{ steps.setSHAs.outputs.base }} --head=${{ steps.setSHAs.outputs.head }}
        id: myaction

      - name: Affected string
        run: echo "Affected string ${{ steps.myaction.outputs.stdout }}"

      - name: Clean affected string
        run: echo "Affected string ${{ steps.myaction.outputs.stdout }}" | tr -d ' \t\n\r'

      # - name: Transform stdout to array
      #   run: |
      #     text="${{ steps.myaction.outputs.stdout }}"
      #     IFS=$'\n' read -r -a lines <<<"$text"
      #     array=()
      #     for line in "${lines[@]}"; do
      #         if [[ $line =~ New\sstring ]]; then
      #             array+=("$line")
      #         fi
      #     done
      #     echo "${array[@]}"

      # - name: Split string and print words with "New string" prefix
      #   run: |
      #     text="${{ steps.myaction.outputs.stdout }}"
      #     IFS=$'\n' read -r -a lines <<<"$text"
      #     array=()
      #     for line in "${lines[@]}"; do
      #         if [[ $line =~ New\sstring ]]; then
      #             array+=("$line")
      #         fi
      #     done
      #     for word in "${array[@]}"; do
      #         echo "$word"
      #     done
      #   env:
      #     stdout: ${{ steps.myaction.outputs.stdout }}
