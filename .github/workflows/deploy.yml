name: GitHub Pages

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
      actions: read

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Install
        run: npm install
      - name: Read Project Config
        run:
          cat projects-config.json
          # Mark your git directory as safe
      # - name: Set Git Config
      #   run: git config --add safe.directory "$GITHUB_WORKSPACE"

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4

      - run: |
          echo "BASE: ${{ env.NX_BASE }}"
          echo "HEAD: ${{ env.NX_HEAD }}"

      - name: Show affected projects
        run: npx nx show projects --affected -t build --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }} --output=json
        id: show_projects_output

      - name: Print affected projects
        run: echo "${{ steps.show_projects_output.stdout }}"

      - name: List current folder
        run: ls -la
      - name: Build app
        run: npx nx run-many --target=build --projects=e-auto-ladestation,hochwasser
      - name: List current folder
        run: ls -la
      - name: Get Affected Projects
        id: get_affected_projects
        run: |
          affected_projects=$(npx nx show projects --affected --base=main)
          projects_list=$(echo "$affected_projects" | awk '{print "\""$1"\""}' | paste -sd "," -)
          echo "::set-output name=projects::$projects_list"

      - name: Print Affected Projects
        run: |
          affected_projects="${{ steps.get_affected_projects.outputs.projects }}"
          echo "Affected Projects:"
          echo "$affected_projects"

      - name: Check for specific project
        id: check_project
        run: |
          affected_projects="${{ steps.get_affected_projects.outputs.projects }}"
          affected_projects=${affected_projects#"\""}
          affected_projects=${affected_projects%"\""}
          IFS=',' read -ra projects_array <<< "$affected_projects"
          for project in "${projects_array[@]}"; do
            if [ "$project" = "hochwasser" ]; then
              echo "hochwasser true"
              repoLink=$(jq -r '.projects.hochwasser.repoLink' projects-config.json)
              projectPath=$(jq -r '.projects.hochwasser.projectPath' projects-config.json)
              echo "repo_link: $repoLink"
              echo "project_path: $projectPath"
              echo "REPO_LINK=$repoLink" >> $GITHUB_ENV
              echo "PROJECT_PATH=$projectPath" >> $GITHUB_ENV
              echo "::set-output name=deploy_required::true"
            fi
          done

      - name: Print repoLink and projectPath
        run: |
          echo "repoLink: ${{ steps.check_project.outputs.repoLink }}"
          echo "projectPath: ${{ steps.check_project.outputs.projectPath }}"
          echo "repoLink: ${{ env.REPO_LINK }}"
          echo "projectPath: ${{ env.PROJECT_PATH }}"
        shell: bash
        env:
          REPO_LINK: ${{ steps.check_project.outputs.repoLink }}
          PROJECT_PATH: ${{ steps.check_project.outputs.projectPath }}

      - name: Deploy on condition
        if: ${{ steps.check_project.outputs.deploy_required == 'true' }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.KARMA_ORG }}
          external_repository: ${{ env.REPO_LINK }}
          publish_dir: ${{ env.PROJECT_PATH }}

  #     Check for config file
  #    If no config file is here  cancel deployment.
  #   If there is a config file read the variables and save it to yml variables

  # - name: Deploy B
  #   uses: peaceiris/actions-gh-pages@v3
  #   # if: github.ref == 'refs/heads/main'
  #   with:
  #     personal_token: ${{ secrets.KARMA_ORG }}
  #     # github_token: ${{ secrets.KAMAFIRST }}
  #     # deploy_key: ${{ secrets.KAMAFIRST }}
  #     external_repository: carma-demo/topic-hochwasser
  #     publish_dir: ./dist/apps/topicmaps/hochwasser
